// Generated by typings
// Source: node_modules/@brightsign/badatamodel/index.d.ts
declare module '@brightsign/badatamodel' {
/**
 * Created by jsugg on 10/11/16.
 */

// Redux types - must match Redux typings file
interface Action { type: any; }
type Reducer<S> = <A extends Action>(state: S, action: A) => S;
interface Dispatch<S> { <A extends Action>(action: A): A; }
interface ActionCreator<A> { (...args: any[]): A; }

// Note: we are redefining base redux interfaces and types here, loccally inside our module.
// It seems we should be able to just import these definitions, but this causes strange issues when
//  a client of this package tries to build typings - there are conflicts created with external redux package typings.
// It would be good to solve that, but this should be pretty safe since these base redux types are
//  fundamental and very unlikely to change.

// Data types
export type BaDmId = string;
export const BaDmIdNone : BaDmId;

// Note leading 'v' because enum names cannot start with a digit
export enum VideoMode {
    v1920x1080x60p,
    v1920x1080x30p,
    v1920x1080x24p,
    v1920x1080x60i,
    v1920x1080x30i
}
// Name function converts a VideoMode to proper string (removes leading 'v')
export function VideoModeName(vm : VideoMode) : string;

export enum ZoneType {
    Video_Or_Images,
    Video_Only,
    Images,
    Audio_Only,
    Enhanced_Audio,
    Ticker,
    Clock,
    Background_Image
}
// Name functions replaces underscores with spaces
export function ZoneTypeName(zt : ZoneType) : string;

export enum MediaType {
    Video,
    Image,
    Audio
}

export enum ContentItemType {
    Media,
    Html,
    LiveMedia,
    MrssFeed
}

export enum MediaStateContainerType {
    Zone,
    MediaList,
    SuperState
}

export enum EventType {
    MediaEnd,
    Timer
}

export enum TransitionType {
    No_effect,
    Image_wipe_from_top,
    Image_wipe_from_bottom,
    Image_wipe_from_left,
    Image_wipe_from_right,
    Explode_from_center,
    Explode_top_left,
    Explode_top_right,
    Explode_bottom_left,
    Explode_bottom_right,
    Venetian_blinds__vertical,
    Venetian_blinds__horizontal,
    Comb_effect__vertical,
    Comb_effect__horizontal,
    Fade_to_background_color,
    Fade_to_new_image,
    Slide_from_top,
    Slide_from_bottom,
    Slide_from_left,
    Slide_from_right
}
// Name functions replaces underscores with spaces, double underscores with spaced dashes
export function TransitionTypeName(tt : TransitionType) : string;

export enum CompareOperator {
    Equals,
    NotEquals,
    GreaterThan,
    GreaterThanOrEqual,
    LessThan,
    LessThanOrEqual
}

// Interfaces for data model entities

// This object is intended to be also used in a DmMediaLibrary data model
export interface DmMediaObjectState
{
    // Properties
    readonly path : string;
    readonly mediaType : MediaType;
}

export interface DmMediaObject extends DmMediaObjectState
{
    isEqual(other:DmMediaObject) : boolean;
    fileName() : string;
    isAvailable() : boolean;
    //isLocal() : boolean;
}

export interface DmObject
{
    // Properties
    readonly id  : BaDmId;
    readonly name : string;
}

export interface DmHtmlSite extends DmObject
{
    // Properties
    readonly localContent : boolean;
    readonly url : string;
    readonly queryString : string;
}

export interface DmContentItemState extends DmObject
{
    readonly type: ContentItemType;
}
export type DmDerivedContentItemState = DmMediaContentItemState | DmHtmlContentItemState;

export interface DmContentItem extends DmContentItemState
{
    // Methods
}

export interface DmMediaContentItemState extends DmContentItemState
{
    // Properties - state only - no methods
    readonly media : DmMediaObjectState;
}

export interface DmMediaContentItem extends DmContentItem
{
    // Does not extend DmMediaContentItemState so we have a true DmMediaObject, with methods, as a member
    readonly media : DmMediaObject;
}

export interface DmHtmlContentItemState extends DmContentItemState
{
    readonly siteId : BaDmId;
    readonly enableExternalData : boolean
    readonly enableMouseEvents : boolean;
    readonly displayCursor : boolean;
    readonly hwzOn : boolean;
}

export interface DmHtmlContentItem extends DmContentItem
{
    // Methods
}

export interface DmUserVariable extends DmObject
{
    // Properties
    readonly name : string;
    readonly value : string;
    readonly defaultValue : string;
}

export interface DmConditionState extends DmObject
{
    // Properties
    readonly userVariable : DmUserVariable;
    readonly compareOperator : CompareOperator;
    readonly compareValue : string;
}

export interface DmCondition extends DmConditionState
{
    // Computed properties
    readonly isTrue : boolean;
}

export interface DmTransitionState extends DmObject
{
    readonly eventId: BaDmId;
    readonly targetMediaStateId: BaDmId;
    readonly type: TransitionType;
    readonly condition?: DmConditionState;
}

export interface DmTransition extends DmTransitionState
{
    readonly isDefaultTarget: boolean;
}

export interface DmTimer
{
    interval : number;
}
export type DmEventData = DmTimer | undefined;  // To be extended with other event data types

export interface DmEventState extends DmObject
{
    readonly type : EventType;
    readonly mediaStateId: BaDmId;
    readonly data: DmEventData;
}

export interface DmEvent extends DmEventState
{

}

export interface DmMediaStateContainer
{
    id: BaDmId,
    type: MediaStateContainerType
}

export interface DmMediaStateState extends DmObject
{
    // Properties
    readonly container: DmMediaStateContainer;
    readonly contentItemState: DmDerivedContentItemState;
    readonly volume: number;
}

export interface DmMediaState extends DmObject
{
    // Does not extend DmMediaStateState so we have a true DmContentItem, with methods, as a member
    readonly container: DmMediaStateContainer;
    readonly contentItem: DmContentItem;
    readonly volume: number;
}

// export interface DmPlaylist extends DmObject
// {
//
// }

export interface DmZoneState extends DmObject
{
    readonly type: ZoneType;
    readonly nonInteractive: boolean;
    readonly initialMediaStateId: BaDmId;
}

export interface DmZone extends DmZoneState
{
    // Computed properties
    readonly containerObject: DmMediaStateContainer;
}

export interface DmSignState
{
    // Properties
    readonly id: BaDmId,
    readonly name : string;
    readonly videoMode : VideoMode;
}

// The DmSign object contains sign metadata
export interface DmSign extends DmSignState
{
    // Methods
}

// Data model state
// Note: this is to be considered an opaque type. Do not write code dependent on this structure,
//  as it may change at any time.
// Use only dispatched actions to change the state,and use only selectors to access it

export type DmZoneCollectionState = {zonesById: {[id: string]: DmZoneState}, allZones: BaDmId[]};
export type DmMediaStateCollectionState = {[id: string]: DmMediaStateState};
export type DmEventCollectionState = {[id: string]: DmEventState};
export type DmTransitionCollectionState = {[id: string]: DmTransitionState};
export interface DmState {
    sign: DmSign,
    zones: DmZoneCollectionState,
    mediaStates: DmMediaStateCollectionState,
    events: DmEventCollectionState,
    transitions: DmTransitionCollectionState
}

// Data model reducer. This can be combined with other reducers to include other state in a store.
export const baDmReducer : Reducer<DmState>;

// Action creators

export type DmDispatch = Dispatch<DmState>;

export interface BaDmSimpleAction extends Action {
    type: string,   // override Any - must be a string
    id: BaDmId,
    error?: boolean,
    meta?: {}
}

export interface BaDmAction<T> extends BaDmSimpleAction {
    payload: T
}

// BaDm specific thunk function
// Dispatch is always a DmDispatch
// getState always returns DmState
// Thunk function itself always returns a Promise that resolves with the original BaDmAction
// The function parameters match redux-thunk ThunkFunction parameters
export type BaDmThunkAction<T> = (dispatch: DmDispatch, getState: () => DmState, extraArgument: undefined) => Promise<BaDmAction<T>>;

// Sign actions
export interface SignParams {
    name?: string,
    videoMode?: VideoMode
}
export type SignAction = BaDmAction<SignParams>;

export function baNewSign(name: string, mode: VideoMode) : ActionCreator<SignAction>;
export function baOpenSign(name: string, mode: VideoMode) : ActionCreator<SignAction>;

// Zone actions
export interface ZoneParams {
    name?: string,
    type?: ZoneType,
    nonInteractive?: boolean,
    initialMediaStateId?: BaDmId
}
export type ZoneAction = BaDmAction<ZoneParams>;

export function baAddZone(name: string, type: ZoneType, nonInteractive? : boolean): ActionCreator<ZoneAction>;

// Returns a thunk function, which returns a Promise which resolves to the UpdateZone action object
// If there is an error, the Promise is rejected, and the UpdateZone action object will contain error information
export function baUpdateZone(id: BaDmId, params: ZoneParams) : BaDmThunkAction<ZoneAction>;
export function baDeleteZone(id: BaDmId): ActionCreator<BaDmSimpleAction>;

// MediaState actions
export interface MediaStateParams {
    name?: string,
    container?: DmMediaStateContainer,
    contentItemState?: DmContentItemState,
}
export type MediaStateAction = BaDmAction<MediaStateParams>;

export function baAddMediaState(
    name: string,
    container: DmMediaStateContainer,
    contentItemState: DmContentItemState,
    volume? : number
) : ActionCreator<MediaStateAction>;
export function baUpdateMediaState(id: BaDmId, params: MediaStateParams): ActionCreator<MediaStateAction>;
export function baDeleteMediaState(id: BaDmId): ActionCreator<BaDmSimpleAction>;

// Event actions
export interface EventParams {
    name?: string,
    type?: EventType;
    mediaStateId?: BaDmId;
    data?: DmEventData;
}
export type EventAction = BaDmAction<EventParams>;

export function baAddEvent(name: string, type: EventType, mediaState: BaDmId, data?: DmEventData): ActionCreator<EventAction>;
export function baUpdateEvent(id: BaDmId, params: EventParams): ActionCreator<EventAction>;
export function baDeleteEvent(id: BaDmId): ActionCreator<BaDmSimpleAction>;

// Transition actions
export interface TransitionParams {
    name?: string,
    eventId?: BaDmId,
    targetMediaStateId?: BaDmId;
    type?: TransitionType;
    conditionState?: DmConditionState;
}
export type TransitionAction = BaDmAction<TransitionParams>;

export function baAddTransition(
    name: string,
    eventId: BaDmId,
    targetMediaStateId: BaDmId,
    type? : TransitionType,
    conditionState? : DmConditionState
) : ActionCreator<TransitionAction>;
export function baUpdateTransition(id: BaDmId, params: TransitionParams): ActionCreator<TransitionAction>;
export function baDeleteTransition(id: BaDmId): ActionCreator<BaDmSimpleAction>;

// Selectors

// Fundamental State Selectors
// Sign metadata
export function baGetSignMetaData(state: DmState) : DmSign;
export function baGetSignName(state: DmState) : string;
export function baGetSignVideoMode(state: DmState) : VideoMode;
export function baGetSignVideoModeName(state: DmState) : string;

// Zone
// Return DmZone object for given id: props = {id: <desired ZoneId> }
export function baGetZoneById(state: DmState, props: any) : DmZone;
// Return DmZone object for given zone name: props = {name: <desired ZoneNameString> }
export function baGetZoneByName(state: DmState, props: any) : DmZone;
// Return array of Zone IDs for the sign (length = # of zones in sign)
export function baGetZonesForSign(state: DmState) : BaDmId[];
// Return # of zones in sign
export function baGetZoneCount(state: DmState) : number;

// MediaState
// Return DmMediaState object for a given id: props = {id: <desired MediaStateId> }
export function baGetMediaStateById(state: DmState, props: any) : DmMediaState;
// Return DmMediaState object for given MediaState name: props = {name: <desired ZoneNameString> }
export function baGetMediaStateByName(state: DmState, props: any) : DmMediaState;
// Return array of MediaState IDs for the zone (length = # of media states in zone)
export function baGetMediaStatesForZone(state: DmState, props: any) : BaDmId[];

// Event
// Return DmEvent object for a given id: props = {id: <desired EventId> }
export function baGetEventById(state: DmState, props: any) : DmEvent;
// Return array of Event IDs for the media state (length = # of events in zone)
export function baGetEventsForMediaState(state: DmState, props: any) : BaDmId[];

// Transition
// Return DmTransition object for a given id: props = {id: <desired TransitionId> }
export function baGetTransitionById(state: DmState, props: any) : DmTransition;
// Return array of Transition IDs for the event (length = # of transitions in event)
export function baGetTransitionsForEvent(state: DmState, props: any) : BaDmId[];

// Derived State Selectors
// Return DmMediaState object representing the initial MediaState in a zone
export function baGetInitialMediaStateForZone(state: DmState, props: any) : DmMediaState;
}
